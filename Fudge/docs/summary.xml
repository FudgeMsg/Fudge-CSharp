<?xml version="1.0" encoding="utf-8" ?>
<!--
  Copyright 2009 by OpenGamma Inc and other contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0
    
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<doc>
  <assembly>
    <name>Fudge</name>
  </assembly>
  <members>
    <member name="R:Fudge">
      <summary>
        Fudge is a hierarchical, typesafe, binary, self-describing message encoding system.
        <list type="bullet">
          <item>
            <term>Hierarchical</term>
            <description>Fudge messages aren't just a flat structure, they can be nested, creating larger, more complex data structures.</description>
          </item>
          <item>
            <term>Typesafe</term>
            <description>Individual fields in a Fudge message are provided with their type data encoded, so that you can extract data safely.</description>
          </item>
          <item>
            <term>Binary</term>
            <description>Fudge encoded data is binary, making it much smaller than text-based representations like XML or JSON.</description>
          </item>
          <item>
            <term>Self-Describing</term>
            <description>Fudge messages contain metadata about the fields encoded (like a name or an ordinal), meaning that you can manipulate them without knowing the schema in advance.</description>
          </item>
          <item>
            <term>Message</term>
            <description>Fudge was originally designed for encoding data to pass in a Message Oriented Middleware system, and so are more suited to the types of objects likely to be transmitted over a network connection than to a pure streaming mode.</description>
          </item>
        </list>
        <para>Fudge, however, is not a Message Oriented Middleware platform or standard. While Fudge works well in MOM environments, it really focuses more on what goes in the body of the messages you send. Fudge works great with HTTP, JMS, and AMQP as the underlying network transport.</para>
        <para>For more information, please refer to wiki.fudgemsg.org.</para>
      </summary>
    </member>
    <member name="N:Fudge">
      <summary>
        The core API for working with Fudge encoded data.
      </summary>
    </member>
    <member name="N:Fudge.Linq">
      <summary>
        Provides a Linq-to-Fudge implementation.
      </summary>
    </member>
    <member name="N:Fudge.Taxon">
      <summary>
        Allows for working with the Fudge Taxonomy system.
      </summary>
    </member>
    <member name="N:Fudge.Types">
      <summary>
        Contains all Fudge type handlers.
      </summary>
    </member>
    <member name="N:Fudge.Util">
      <summary>
        Contains generic helper classes that aren't part of the core Fudge API.
      </summary>
    </member>
  </members>
</doc>